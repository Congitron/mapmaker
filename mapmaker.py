#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Apr  6 17:03:54 2010

import wx       #wxpython stuff
import Image    #PIL library stuff
import ImageDraw
import sys
import random
import convert  #a local module for converting image file types between libraries

#<my code>

#</my code>

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
    #<my code>
    mapFrameInit = False
    heightMapInit = False
    TerrainMapInit = False
    heightMap = ''
    terrainMap = ''

    #</my code>
    def __init__(self, *args, **kwds):
        #stuff I added            
        
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        self.file = wx.Menu()
        self.new = wx.MenuItem(self.file, wx.NewId(), "&New", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.new)
        self.open = wx.MenuItem(self.file, wx.NewId(), "&Open", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.open)
        self.save = wx.MenuItem(self.file, wx.NewId(), "&Save", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.save)
        self.file.AppendSeparator()
        self.exit = wx.MenuItem(self.file, wx.NewId(), "&Exit", "", wx.ITEM_NORMAL)
        self.file.AppendItem(self.exit)
        self.frame_1_menubar.Append(self.file, "&File")
        wxglade_tmp_menu = wx.Menu()
        self.frame_1_menubar.Append(wxglade_tmp_menu, "&Edit")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.button_1 = wx.Button(self.notebook_1_pane_1, -1, "Random")
        self.button_3 = wx.Button(self.notebook_1_pane_1, -1, "Circles")
        self.button_4 = wx.Button(self.notebook_1_pane_1, -1, "Rectangles")
        self.button_2 = wx.Button(self.notebook_1_pane_1, -1, "Smooth")
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_4 = wx.Panel(self.notebook_1, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.onNew, self.new)
        self.Bind(wx.EVT_MENU, self.onOpen, self.open)
        self.Bind(wx.EVT_MENU, self.onSave, self.save)
        self.Bind(wx.EVT_MENU, self.OnExit, self.exit)
        self.Bind(wx.EVT_BUTTON, self.OnBtn1, self.button_1)
        self.Bind(wx.EVT_BUTTON, self.Onbutton3, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.OnButton4, self.button_4)
        self.Bind(wx.EVT_BUTTON, self.OnButton2, self.button_2)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("Citrus Map Maker")
        self.SetSize((400, 300))
        self.notebook_1.SetMinSize((400,150))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.FlexGridSizer(1, 1, 0, 0)
        sizer_3 = wx.FlexGridSizer(3, 3, 0, 0)
        sizer_3.Add(self.button_1, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.button_3, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.button_4, 0, wx.ADJUST_MINSIZE, 0)
        sizer_3.Add(self.button_2, 0, wx.ADJUST_MINSIZE, 0)
        self.notebook_1_pane_1.SetSizer(sizer_3)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "Height Map")
        self.notebook_1.AddPage(self.notebook_1_pane_2, "Terrain")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "Biome")
        self.notebook_1.AddPage(self.notebook_1_pane_4, "Population")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.SetSize((400, 300))
        # end wxGlade

    def OnBtn2(self, event): # wxGlade: MyFrame.<event_handler>
        print "Button 2"
        event.Skip()

    def OnExit(self, event): # wxGlade: MyFrame.<event_handler>
        sys.exit()
        event.Skip()

    def onNew(self, event): # wxGlade: MyFrame.<event_handler>
        self.heightMap = Image.new("RGB", (512,256))
        image = wx.EmptyImage( *self.heightMap.size )
        image.SetData( self.heightMap.convert( "RGB").tostring() )
        bitmap = image.ConvertToBitmap() # wx.BitmapFromImage(image)

        #check to see if the map frame's been initialized
        if (self.mapFrameInit == False):
                self.mapFrame = wx.Frame(None, -1, "Map", size = (512, 256))
                self.mapPanel = wx.Panel(self.mapFrame, -1)
                self.mapFrame.Show(1)
                self.mapFrameInit = True

        wx.StaticBitmap(self.mapPanel, -1, bitmap, (0, 0))
        #frame1.Show(1)
        
        self.heightMapInit = True
        event.Skip()

    def onOpen(self, event): # wxGlade: MyFrame.<event_handler>
        print "File->Open"
        filename = ""  # Use  filename as a flag
        dlg = wx.FileDialog(self, message="Choose a file")
  
        if dlg.ShowModal() == wx.ID_OK:
            filename = dlg.GetPath()
            dlg.Destroy()
  
        if filename:
            source = Image.open(str(filename), 'r')
            terrainmap = source
            image = wx.EmptyImage( *source.size )
            image.SetData( source.convert( "RGB").tostring() )
            
            # if the image has an alpha channel, you can set it with this line:
            #image.SetAlphaData(source.convert("RGBA").tostring()[3::4])
            
            bitmap = image.ConvertToBitmap() # wx.BitmapFromImage(image)
            
            if (self.mapFrameInit == False):
                self.mapFrame = wx.Frame(None, -1, "Map", size = (512, 256))
                self.mapPanel = wx.Panel(self.mapFrame, -1)
                self.mapFrame.Show(1)
                self.mapFrameInit = True

            wx.StaticBitmap(self.mapPanel, -1, bitmap, (0, 0))
            #frame1.Show(1)
            
            self.heightMapInit = True
        
        event.Skip()

    def onSave(self, event): # wxGlade: MyFrame.<event_handler>
        print "File->Save"
        event.Skip()

    def OnBtn1(self, event): # wxGlade: MyFrame.<event_handler>
        self.randomMap()
            
        event.Skip()

    def Onbutton3(self, event): # wxGlade: MyFrame.<event_handler>
        self.randomMap()
        event.Skip()

    def OnButton4(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnButton4' not implemented"
        event.Skip()

    def randomMap(self):
        if (self.heightMapInit):
            draw = ImageDraw.Draw(self.heightMap)
            for x in range(512):
                for y in range(256):
                    value = str(random.randint(0, 255))
                    f = "rgb(" + value + "," + value + "," + value + ")"
                    draw.point((x,y), fill=f)
            
            source = self.heightMap
            image = wx.EmptyImage( *source.size )
            image.SetData( source.convert( "RGB").tostring() )
            bitmap = image.ConvertToBitmap() # wx.BitmapFromImage(image)

            if (self.mapFrameInit == False):
                self.mapFrame = wx.Frame(None, -1, "Map", size = (512, 256))
                self.mapPanel = wx.Panel(self.mapFrame, -1)
                self.mapFrame.Show(1)
                self.mapFrameInit = True

            wx.StaticBitmap(self.mapPanel, -1, bitmap, (0, 0))
            
    def OnButton2(self, event): # wxGlade: MyFrame.<event_handler>
        print "Event handler `OnButton2' not implemented"
        event.Skip()

# end of class MyFrame


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, -1, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    app.MainLoop()
